##########################################################################################
# The class mapping definition for the VDMJ Proof Obligation Generator. See ClassMapper.
##########################################################################################

# initializers, called by ClassMapper.init()
init com.fujitsu.vdmj.po.annotations.POAnnotation.reset();

# definitions
package com.fujitsu.vdmj.tc.definitions to com.fujitsu.vdmj.po.definitions;
map TCDefinitionList{} to PODefinitionList(this);
map TCDefinitionListList{} to PODefinitionListList(this);
map TCAccessSpecifier{isStatic, isAsync, access, isPure} to POAccessSpecifier(isStatic, isAsync, access, isPure);
map TCAssignmentDefinition{ name, type, expression, expType} to POAssignmentDefinition(name, type, expression, expType);
map TCBUSClassDefinition{classtype, definitions} to POBUSClassDefinition(classtype, definitions);
map TCClassDefinition{annotations, name, classtype, definitions, invariant, hasConstructors} to POClassDefinition(annotations, name, classtype, definitions, invariant, hasConstructors);
map TCClassInvariantDefinition{name, expression, classDefinition} to POClassInvariantDefinition(name, expression, classDefinition);
map TCClassList{} to POClassList(this);
map TCCPUClassDefinition{classtype, definitions, invariant, hasConstructors} to POCPUClassDefinition(classtype, definitions, invariant, hasConstructors);
map TCDefinition{} to PODefinition();
map TCDefinitionSet{} to PODefinitionSet();
map TCEqualsDefinition{location, pattern, typebind, bind, test, expType, defType, defs} to POEqualsDefinition(location, pattern, typebind, bind, test, expType, defType, defs);
map TCExplicitFunctionDefinition{annotations, name, typeParams, type, paramPatternList, body, precondition, postcondition, isUndefined, expectedResult, actualResult, predef, postdef, paramDefinitionList, recursive, measureDef, measureName} to POExplicitFunctionDefinition(annotations, name, typeParams, type, paramPatternList, body, precondition, postcondition, isUndefined, expectedResult, actualResult, predef, postdef, paramDefinitionList, recursive, measureDef, measureName);
map TCExplicitOperationDefinition{annotations, name, type, parameterPatterns, paramDefinitions, actualResult, precondition, postcondition, body, isConstructor, predef, postdef, state} to POExplicitOperationDefinition(annotations, name, type, parameterPatterns, precondition, postcondition, body, predef, postdef, paramDefinitions, state, actualResult, isConstructor);
map TCExternalDefinition{state, readOnly} to POExternalDefinition(state, readOnly);
map TCImplicitFunctionDefinition{annotations, name, typeParams, parameterPatterns, type, result, body, precondition, postcondition, predef, postdef, recursive, isUndefined, actualResult, measureDef, measureName} to POImplicitFunctionDefinition(annotations, name, typeParams, parameterPatterns, result, body, precondition, postcondition, type, predef, postdef, recursive, isUndefined, actualResult, measureDef, measureName);
map TCImplicitOperationDefinition{annotations, name, parameterPatterns, result, body, externals, precondition, postcondition, errors, type, isConstructor, predef, postdef, state, actualResult} to POImplicitOperationDefinition(annotations, name, parameterPatterns, result, body, externals, precondition, postcondition, errors, type, predef, postdef, actualResult, state, isConstructor);
map TCImportedDefinition{location, def} to POImportedDefinition(location, def);
map TCInheritedDefinition{name, superdef} to POInheritedDefinition(name, superdef);
map TCInstanceVariableDefinition{name, type, expression, expType} to POInstanceVariableDefinition(name, type, expression, expType);
map TCLocalDefinition{location, name, type} to POLocalDefinition(location, name, type);
map TCMultiBindListDefinition{location, bindings, defs} to POMultiBindListDefinition(location, bindings, defs);
map TCMutexSyncDefinition{annotations, location, operations} to POMutexSyncDefinition(annotations, location, operations);
map TCNamedTraceDefinition{annotations, location, name} to PONamedTraceDefinition(annotations, location, name);
map TCPerSyncDefinition{annotations, location, opname, guard} to POPerSyncDefinition(annotations, location, opname, guard);
map TCRenamedDefinition{name, def} to PORenamedDefinition(name, def);
map TCStateDefinition{name, fields, invPattern, invExpression, initPattern, initExpression, recordType} to POStateDefinition(name, fields, invPattern, invExpression, initPattern, initExpression, recordType);
map TCSystemDefinition{name, classtype, definitions} to POSystemDefinition(name, classtype, definitions);
map TCThreadDefinition{statement} to POThreadDefinition(statement);
map TCTypeDefinition{annotations, name, type, invPattern, invExpression, eqPattern1, eqPattern2, eqExpression, ordPattern1, ordPattern2, ordExpression} to POTypeDefinition(annotations, name, type, invPattern, invExpression, eqPattern1, eqPattern2, eqExpression, ordPattern1, ordPattern2, ordExpression);
map TCValueDefinition{annotations, pattern, type, exp, expType} to POValueDefinition(annotations, pattern, type, exp, expType);
map TCUntypedDefinition{location, name} to POUntypedDefinition(location, name);
map TCQualifiedDefinition{def, type} to POQualifiedDefinition(def, type);

# expressions
package com.fujitsu.vdmj.tc.expressions to com.fujitsu.vdmj.po.expressions;
map TCExpression{} to POExpression();
map TCExpressionList{} to POExpressionList(this);
map TCAbsoluteExpression{location, exp} to POAbsoluteExpression(location, exp);
map TCAndExpression{left, op, right, ltype, rtype} to POAndExpression(left, op, right, ltype, rtype);
map TCApplyExpression{root, args, type, argtypes, recursiveCycles} to POApplyExpression(root, args, type, argtypes, recursiveCycles);
map TCBinaryExpression{} to POBinaryExpression();
map TCBooleanBinaryExpression{} to POBooleanBinaryExpression();
map TCBooleanLiteralExpression{value} to POBooleanLiteralExpression(value);
map TCCardinalityExpression{location, exp} to POCardinalityExpression(location, exp);
map TCCaseAlternative{cexp, pattern, result} to POCaseAlternative(cexp, pattern, result);
map TCCaseAlternativeList{} to POCaseAlternativeList(this);
map TCCasesExpression{location, exp, cases, others, expType} to POCasesExpression(location, exp, cases, others, expType);
map TCCharLiteralExpression{value} to POCharLiteralExpression(value);
map TCCompExpression{left, op, right, ltype, rtype} to POCompExpression(left, op, right, ltype, rtype);
map TCDefExpression{location, localDefs, expression} to PODefExpression(location, localDefs, expression);
map TCDistConcatExpression{location, exp} to PODistConcatExpression(location, exp);
map TCDistIntersectExpression{location, exp} to PODistIntersectExpression(location, exp);
map TCDistMergeExpression{location, exp} to PODistMergeExpression(location, exp);
map TCDistUnionExpression{location, exp} to PODistUnionExpression(location, exp);
map TCDivExpression{left, op, right, ltype, rtype} to PODivExpression(left, op, right, ltype, rtype);
map TCDivideExpression{left, op, right, ltype, rtype} to PODivideExpression(left, op, right, ltype, rtype);
map TCDomainResByExpression{left, op, right, ltype, rtype} to PODomainResByExpression(left, op, right, ltype, rtype);
map TCDomainResToExpression{left, op, right, ltype, rtype} to PODomainResToExpression(left, op, right, ltype, rtype);
map TCElementsExpression{location, exp} to POElementsExpression(location, exp);
map TCElseIfExpression{location, elseIfExp, thenExp} to POElseIfExpression(location, elseIfExp, thenExp);
map TCElseIfExpressionList{} to POElseIfExpressionList(this);
map TCEqualsExpression{left, op, right, ltype, rtype} to POEqualsExpression(left, op, right, ltype, rtype);
map TCEquivalentExpression{left, op, right, ltype, rtype} to POEquivalentExpression(left, op, right, ltype, rtype);
map TCExists1Expression{location, bind, predicate} to POExists1Expression(location, bind, predicate);
map TCExistsExpression{location, bindList, predicate} to POExistsExpression(location, bindList, predicate);
map TCFieldExpression{object, field, memberName} to POFieldExpression(object, field, memberName);
map TCFieldNumberExpression{tuple, field, type} to POFieldNumberExpression(tuple, field, type);
map TCFloorExpression{location, exp} to POFloorExpression(location, exp);
map TCForAllExpression{location, bindList, predicate} to POForAllExpression(location, bindList, predicate);
map TCFuncInstantiationExpression{function, type, actualTypes, expdef, impdef} to POFuncInstantiationExpression(function, actualTypes, type, expdef, impdef);
map TCGreaterEqualExpression{left, op, right, ltype, rtype} to POGreaterEqualExpression(left, op, right, ltype, rtype);
map TCGreaterExpression{left, op, right, ltype, rtype} to POGreaterExpression(left, op, right, ltype, rtype);
map TCHeadExpression{location, exp, etype} to POHeadExpression(location, exp, etype);
map TCHistoryExpression{location, hop, opnames} to POHistoryExpression(location, hop, opnames);
map TCIfExpression{location, ifExp, thenExp, elseList, elseExp} to POIfExpression(location, ifExp, thenExp, elseList, elseExp);
map TCImpliesExpression{left, op, right, ltype, rtype} to POImpliesExpression(left, op, right, ltype, rtype);
map TCIndicesExpression{location, exp} to POIndicesExpression(location, exp);
map TCInSetExpression{left, op, right, ltype, rtype} to POInSetExpression(left, op, right, ltype, rtype);
map TCIntegerLiteralExpression{value} to POIntegerLiteralExpression(value);
map TCIotaExpression{location, bind, predicate} to POIotaExpression(location, bind, predicate);
map TCIsExpression{location, typename, basictype, test, typedef} to POIsExpression(location, basictype, typename, test, typedef);
map TCIsOfBaseClassExpression{location, baseclass, exp} to POIsOfBaseClassExpression(location, baseclass, exp);
map TCIsOfClassExpression{location, classname, exp, classType} to POIsOfClassExpression(location, classname, exp, classType);
map TCLambdaExpression{location, bindList, paramPatterns, type, expression, paramDefinitions} to POLambdaExpression(location, bindList, expression, type, paramPatterns, paramDefinitions);
map TCLenExpression{location, exp} to POLenExpression(location, exp);
map TCLessEqualExpression{left, op, right, ltype, rtype} to POLessEqualExpression(left, op, right, ltype, rtype);
map TCLessExpression{left, op, right, ltype, rtype} to POLessExpression(left, op, right, ltype, rtype);
map TCLetBeStExpression{location, bind, suchThat, value, def} to POLetBeStExpression(location, bind, suchThat, value, def);
map TCLetDefExpression{location, localDefs, expression} to POLetDefExpression(location, localDefs, expression);
map TCMapCompExpression{location, first, bindings, predicate, maptype} to POMapCompExpression(location, first, bindings, predicate, maptype);
map TCMapDomainExpression{location, exp} to POMapDomainExpression(location, exp);
map TCMapEnumExpression{location, members, domtypes, rngtypes} to POMapEnumExpression(location, members, domtypes, rngtypes);
map TCMapExpression{} to POMapExpression();
map TCMapInverseExpression{location, exp, type} to POMapInverseExpression(location, exp, type);
map TCMapletExpression{location, left, right} to POMapletExpression(location, left, right);
map TCMapletExpressionList{} to POMapletExpressionList(this);
map TCMapRangeExpression{location, exp} to POMapRangeExpression(location, exp);
map TCMapUnionExpression{left, op, right, ltype, rtype} to POMapUnionExpression(left, op, right, ltype, rtype);
map TCMkBasicExpression{type, arg} to POMkBasicExpression(type, arg);
map TCMkTypeExpression{typename, args, recordType, argTypes} to POMkTypeExpression(typename, args, recordType, argTypes);
map TCModExpression{left, op, right, ltype, rtype} to POModExpression(left, op, right, ltype, rtype);
map TCMuExpression{location, record, modifiers, recordType, modTypes} to POMuExpression(location, record, modifiers, recordType, modTypes);
map TCNarrowExpression{location, basictype, typename, test, typedef, exptype} to PONarrowExpression(location, basictype, typename, test, typedef, exptype);
map TCNewExpression{location, classname, args} to PONewExpression(location, classname, args);
map TCNilExpression{location} to PONilExpression(location);
map TCNotEqualExpression{left, op, right, ltype, rtype} to PONotEqualExpression(left, op, right, ltype, rtype);
map TCNotExpression{location, exp} to PONotExpression(location, exp);
map TCNotInSetExpression{left, op, right, ltype, rtype} to PONotInSetExpression(left, op, right, ltype, rtype);
map TCNotYetSpecifiedExpression{location} to PONotYetSpecifiedExpression(location);
map TCNumericBinaryExpression{} to PONumericBinaryExpression();
map TCOrExpression{left, op, right, ltype, rtype} to POOrExpression(left, op, right, ltype, rtype);
map TCPlusExpression{left, op, right, ltype, rtype} to POPlusExpression(left, op, right, ltype, rtype);
map TCPlusPlusExpression{left, op, right, ltype, rtype} to POPlusPlusExpression(left, op, right, ltype, rtype);
map TCPostOpExpression{postexpression} to POPostOpExpression(postexpression);
map TCPowerSetExpression{location, exp} to POPowerSetExpression(location, exp);
map TCPreExpression{location, function, args} to POPreExpression(location, function, args);
map TCPreOpExpression{expression} to POPreOpExpression(expression);
map TCProperSubsetExpression{left, op, right, ltype, rtype} to POProperSubsetExpression(left, op, right, ltype, rtype);
map TCQuoteLiteralExpression{type} to POQuoteLiteralExpression(type);
map TCRangeResByExpression{left, op, right, ltype, rtype} to PORangeResByExpression(left, op, right, ltype, rtype);
map TCRangeResToExpression{left, op, right, ltype, rtype} to PORangeResToExpression(left, op, right, ltype, rtype);
map TCRealLiteralExpression{value} to PORealLiteralExpression(value);
map TCRecordModifier{tag, value} to PORecordModifier(tag, value);
map TCRecordModifierList{} to PORecordModifierList(this);
map TCRemExpression{left, op, right, ltype, rtype} to PORemExpression(left, op, right, ltype, rtype);
map TCReverseExpression{location, exp} to POReverseExpression(location, exp);
map TCSameBaseClassExpression{location, left, right} to POSameBaseClassExpression(location, left, right);
map TCSameClassExpression{location, left, right} to POSameClassExpression(location, left, right);
map TCSelfExpression{location} to POSelfExpression(location);
map TCSeqCompExpression{location, first, bind, predicate} to POSeqCompExpression(location, first, bind, predicate);
map TCSeqConcatExpression{left, op, right, ltype, rtype} to POSeqConcatExpression(left, op, right, ltype, rtype);
map TCSeqEnumExpression{location, members, types} to POSeqEnumExpression(location, members, types);
map TCSeqExpression{} to POSeqExpression();
map TCSetCompExpression{location, first, bindings, predicate, setType} to POSetCompExpression(location, first, bindings, predicate, setType);
map TCSetDifferenceExpression{left, op, right, ltype, rtype} to POSetDifferenceExpression(left, op, right, ltype, rtype);
map TCSetEnumExpression{location, members, types} to POSetEnumExpression(location, members, types);
map TCSetExpression{} to POSetExpression();
map TCSetIntersectExpression{left, op, right, ltype, rtype} to POSetIntersectExpression(left, op, right, ltype, rtype);
map TCSetRangeExpression{location, first, last, ftype, ltype} to POSetRangeExpression(location, first, last, ftype, ltype);
map TCSetUnionExpression{left, op, right, ltype, rtype} to POSetUnionExpression(left, op, right, ltype, rtype);
map TCStarStarExpression{left, op, right, ltype, rtype} to POStarStarExpression(left, op, right, ltype, rtype);
map TCStateInitExpression{state} to POStateInitExpression(state);
map TCStringLiteralExpression{value} to POStringLiteralExpression(value);
map TCSubclassResponsibilityExpression{location} to POSubclassResponsibilityExpression(location);
map TCSubseqExpression{seq, from, to, ftype, ttype} to POSubseqExpression(seq, from, to, ftype, ttype);
map TCSubsetExpression{left, op, right, ltype, rtype} to POSubsetExpression(left, op, right, ltype, rtype);
map TCSubtractExpression{left, op, right, ltype, rtype} to POSubtractExpression(left, op, right, ltype, rtype);
map TCTailExpression{location, exp, etype} to POTailExpression(location, exp, etype);
map TCThreadIdExpression{location} to POThreadIdExpression(location);
map TCTimeExpression{location} to POTimeExpression(location);
map TCTimesExpression{left, op, right, ltype, rtype} to POTimesExpression(left, op, right, ltype, rtype);
map TCTupleExpression{location, args, types} to POTupleExpression(location, args, types);
map TCUnaryExpression{} to POUnaryExpression();
map TCUnaryMinusExpression{location, exp} to POUnaryMinusExpression(location, exp);
map TCUnaryPlusExpression{location, exp} to POUnaryPlusExpression(location, exp);
map TCUndefinedExpression{location} to POUndefinedExpression(location);
map TCVariableExpression{name, vardef} to POVariableExpression(name, vardef);

# annotations
package com.fujitsu.vdmj.tc.annotations to com.fujitsu.vdmj.po.annotations;
map TCAnnotatedExpression{location, annotation, expression} to POAnnotatedExpression(location, annotation, expression);
map TCAnnotatedStatement{location, annotation, statement} to POAnnotatedStatement(location, annotation, statement);
map TCAnnotation{} to POAnnotation();
map TCAnnotationList{} to POAnnotationList(this);

# lex
unmapped com.fujitsu.vdmj.ast.lex.LexIntegerToken;
unmapped com.fujitsu.vdmj.ast.lex.LexBooleanToken;
unmapped com.fujitsu.vdmj.ast.lex.LexCharacterToken;
unmapped com.fujitsu.vdmj.ast.lex.LexIntegerToken;
unmapped com.fujitsu.vdmj.ast.lex.LexKeywordToken;
unmapped com.fujitsu.vdmj.ast.lex.LexQuoteToken;
unmapped com.fujitsu.vdmj.ast.lex.LexRealToken;
unmapped com.fujitsu.vdmj.ast.lex.LexStringToken;
unmapped com.fujitsu.vdmj.lex.LexLocation;
unmapped com.fujitsu.vdmj.lex.Token;
unmapped com.fujitsu.vdmj.tc.lex.TCIdentifierToken;
unmapped com.fujitsu.vdmj.tc.lex.TCNameToken;
unmapped com.fujitsu.vdmj.tc.lex.TCNameList;

# modules
package com.fujitsu.vdmj.tc.modules to com.fujitsu.vdmj.po.modules;
map TCModuleList{} to POModuleList(this);
map TCModule{annotations, name, defs} to POModule(annotations, name, defs);

# patterns
package com.fujitsu.vdmj.tc.patterns to com.fujitsu.vdmj.po.patterns;
map TCBind{} to POBind();
map TCBooleanPattern{value} to POBooleanPattern(value);
map TCCharacterPattern{value} to POCharacterPattern(value);
map TCConcatenationPattern{left, location, right} to POConcatenationPattern(left, location, right);
map TCExpressionPattern{exp} to POExpressionPattern(exp);
map TCIdentifierPattern{name} to POIdentifierPattern(name);
map TCIgnorePattern{location} to POIgnorePattern(location);
map TCIntegerPattern{value} to POIntegerPattern(value);
map TCMapletPattern{from, to} to POMapletPattern(from, to);
map TCMapletPatternList{} to POMapletPatternList(this);
map TCMapPattern{location, maplets} to POMapPattern(location, maplets);
map TCMapUnionPattern{left, location, right} to POMapUnionPattern(left, location, right);
map TCMultipleBind{} to POMultipleBind();
map TCMultipleBindList{} to POMultipleBindList(this);
map TCMultipleSeqBind{plist, sequence} to POMultipleSeqBind(plist, sequence);
map TCMultipleSetBind{plist, set} to POMultipleSetBind(plist, set);
map TCMultipleTypeBind{plist, type} to POMultipleTypeBind(plist, type);
map TCNamePatternPair{name, pattern} to PONamePatternPair(name, pattern);
map TCNamePatternPairList{} to PONamePatternPairList();
map TCNilPattern{location} to PONilPattern(location);
map TCObjectPattern{location, classname, fieldlist} to POObjectPattern(location, classname, fieldlist);
map TCPattern{} to POPattern();
map TCPatternList{} to POPatternList(this);
map TCPatternListList{} to POPatternListList(this);
map TCPatternBind{location, pattern, bind, defs} to POPatternBind(location, pattern, bind, defs);
map TCQuotePattern{value} to POQuotePattern(value);
map TCRealPattern{value} to PORealPattern(value);
map TCRecordPattern{typename, plist, type} to PORecordPattern(typename, plist, type);
map TCSeqBind{pattern, sequence} to POSeqBind(pattern, sequence);
map TCSeqPattern{location, plist} to POSeqPattern(location, plist);
map TCSetBind{pattern, set} to POSetBind(pattern, set);
map TCSetPattern{location, plist} to POSetPattern(location, plist);
map TCStringPattern{value} to POStringPattern(value);
map TCTuplePattern{location, plist} to POTuplePattern(location, plist);
map TCTypeBind{pattern, type} to POTypeBind(pattern, type);
map TCTypeBindList{} to POTypeBindList(this);
map TCUnionPattern{left, location, right} to POUnionPattern(left, location, right);

# statements
package com.fujitsu.vdmj.tc.statements to com.fujitsu.vdmj.po.statements;
map TCAlwaysStatement{location, always, body} to POAlwaysStatement(location, always, body);
map TCAssignmentStatement{location, target, exp, expType, targetType, classDefinition, stateDefinition, inConstructor} to POAssignmentStatement(location, target, exp, targetType, expType, classDefinition, stateDefinition, inConstructor);
map TCAssignmentStatementList{} to POAssignmentStatementList(this);
map TCAtomicStatement{location, assignments} to POAtomicStatement(location, assignments);
map TCBlockStatement{location, assignmentDefs, statements} to POBlockStatement(location, assignmentDefs, statements);
map TCCallObjectStatement{designator, classname, fieldname, args} to POCallObjectStatement(designator, classname, fieldname, args);
map TCCallStatement{name, args} to POCallStatement(name, args);
map TCCasesStatement{location, exp, cases, others} to POCasesStatement(location, exp, cases, others);
map TCCaseStmtAlternative{pattern, statement} to POCaseStmtAlternative(pattern, statement);
map TCCaseStmtAlternativeList{} to POCaseStmtAlternativeList(this);
map TCClassInvariantStatement{name, invdefs} to POClassInvariantStatement(name, invdefs);
map TCCyclesStatement{location, cycles, statement} to POCyclesStatement(location, cycles, statement);
map TCDefStatement{location, equalsDefs, statement} to PODefStatement(location, equalsDefs, statement);
map TCDurationStatement{location, duration, statement} to PODurationStatement(location, duration, statement);
map TCElseIfStatement{location, elseIfExp, thenStmt} to POElseIfStatement(location, elseIfExp, thenStmt);
map TCElseIfStatementList{} to POElseIfStatementList(this);
map TCErrorCase{name, left, right} to POErrorCase(name, left, right);
map TCErrorCaseList{} to POErrorCaseList(this);
map TCErrorStatement{location} to POErrorStatement(location);
map TCExitStatement{location, expression} to POExitStatement(location, expression);
map TCExternalClauseList{} to POExternalClauseList(this);
map TCFieldDesignator{object, field} to POFieldDesignator(object, field);
map TCForAllStatement{location, pattern, set, statement} to POForAllStatement(location, pattern, set, statement);
map TCForIndexStatement{location, var, from, to, by, statement} to POForIndexStatement(location, var, from, to, by, statement);
map TCForPatternBindStatement{location, patternBind, reverse, exp, statement} to POForPatternBindStatement(location, patternBind, reverse, exp, statement);
map TCIdentifierDesignator{name} to POIdentifierDesignator(name);
map TCIfStatement{location, ifExp, thenStmt, elseList, elseStmt} to POIfStatement(location, ifExp, thenStmt, elseList, elseStmt);
map TCLetBeStStatement{location, bind, suchThat, statement} to POLetBeStStatement(location, bind, suchThat, statement);
map TCLetDefStatement{location, localDefs, statement} to POLetDefStatement(location, localDefs, statement);
map TCMapSeqDesignator{mapseq, exp, seqType} to POMapSeqDesignator(mapseq, exp, seqType);
map TCNonDeterministicStatement{location, statements} to PONonDeterministicStatement(location, statements);
map TCNotYetSpecifiedStatement{location} to PONotYetSpecifiedStatement(location);
map TCObjectApplyDesignator{object, args} to POObjectApplyDesignator(object, args);
map TCObjectDesignator{} to POObjectDesignator();
map TCObjectFieldDesignator{object, classname, fieldname} to POObjectFieldDesignator(object, classname, fieldname);
map TCObjectIdentifierDesignator{name} to POObjectIdentifierDesignator(name);
map TCObjectNewDesignator{expression} to POObjectNewDesignator(expression);
map TCObjectSelfDesignator{location} to POObjectSelfDesignator(location);
map TCPeriodicStatement{opname, args} to POPeriodicStatement(opname, args);
map TCReturnStatement{location, expression} to POReturnStatement(location, expression);
map TCSkipStatement{location} to POSkipStatement(location);
map TCSpecificationStatement{location, externals, precondition, postcondition, errors} to POSpecificationStatement(location, externals, precondition, postcondition, errors);
map TCSporadicStatement{opname, args} to POSporadicStatement(opname, args);
map TCStartStatement{location, objects} to POStartStatement(location, objects);
map TCStateDesignator{} to POStateDesignator();
map TCStatement{} to POStatement();
map TCStatementList{} to POStatementList(this);
map TCStopStatement{location, objects} to POStopStatement(location, objects);
map TCSubclassResponsibilityStatement{location} to POSubclassResponsibilityStatement(location);
map TCTixeStatement{location, traps, body} to POTixeStatement(location, traps, body);
map TCTixeStmtAlternative{patternBind, statement} to POTixeStmtAlternative(patternBind, statement);
map TCTixeStmtAlternativeList{} to POTixeStmtAlternativeList(this);
map TCTrapStatement{location, patternBind, with, body} to POTrapStatement(location, patternBind, with, body);
map TCWhileStatement{location, exp, statement} to POWhileStatement(location, exp, statement);

# traces
package com.fujitsu.vdmj.tc.traces to com.fujitsu.vdmj.po.traces;
map TCTraceApplyExpression{} to POTraceApplyExpression();
map TCTraceBracketedExpression{} to POTraceBracketedExpression();
map TCTraceConcurrentExpression{} to POTraceConcurrentExpression();
map TCTraceCoreDefinition{} to POTraceCoreDefinition();
map TCTraceDefinition{} to POTraceDefinition();
map TCTraceDefinitionList{} to POTraceDefinitionList();
map TCTraceDefinitionTerm{} to POTraceDefinitionTerm();
map TCTraceDefinitionTermList{} to POTraceDefinitionTermList();
map TCTraceLetBeStBinding{} to POTraceLetBeStBinding();
map TCTraceLetDefBinding{} to POTraceLetDefBinding();
map TCTraceRepeatDefinition{} to POTraceRepeatDefinition();

# types
package com.fujitsu.vdmj.tc.types to com.fujitsu.vdmj.po.types;
map TCPatternListTypePairList{} to POPatternListTypePairList(this);
map TCPatternListTypePair{patterns, type} to POPatternListTypePair(patterns, type);
map TCPatternTypePair{pattern, type} to POPatternTypePair(pattern, type);

unmapped com.fujitsu.vdmj.tc.types.TCType;
unmapped com.fujitsu.vdmj.tc.types.TCTypeList;
unmapped com.fujitsu.vdmj.tc.types.TCBasicType;
unmapped com.fujitsu.vdmj.tc.types.TCBooleanType;
unmapped com.fujitsu.vdmj.tc.types.TCBracketType;
unmapped com.fujitsu.vdmj.tc.types.TCCharacterType;
unmapped com.fujitsu.vdmj.tc.types.TCClassType;
unmapped com.fujitsu.vdmj.tc.types.TCField;
unmapped com.fujitsu.vdmj.tc.types.TCFieldList;
unmapped com.fujitsu.vdmj.tc.types.TCFunctionType;
unmapped com.fujitsu.vdmj.tc.types.TCInMapType;
unmapped com.fujitsu.vdmj.tc.types.TCInvariantType;
unmapped com.fujitsu.vdmj.tc.types.TCMapType;
unmapped com.fujitsu.vdmj.tc.types.TCNamedType;
unmapped com.fujitsu.vdmj.tc.types.TCNaturalOneType;
unmapped com.fujitsu.vdmj.tc.types.TCNaturalType;
unmapped com.fujitsu.vdmj.tc.types.TCIntegerType;
unmapped com.fujitsu.vdmj.tc.types.TCNumericType;
unmapped com.fujitsu.vdmj.tc.types.TCOperationType;
unmapped com.fujitsu.vdmj.tc.types.TCOptionalType;
unmapped com.fujitsu.vdmj.tc.types.TCParameterType;
unmapped com.fujitsu.vdmj.tc.types.TCProductType;
unmapped com.fujitsu.vdmj.tc.types.TCQuoteType;
unmapped com.fujitsu.vdmj.tc.types.TCRationalType;
unmapped com.fujitsu.vdmj.tc.types.TCRealType;
unmapped com.fujitsu.vdmj.tc.types.TCRecordType;
unmapped com.fujitsu.vdmj.tc.types.TCSeq1Type;
unmapped com.fujitsu.vdmj.tc.types.TCSeqType;
unmapped com.fujitsu.vdmj.tc.types.TCSetType;
unmapped com.fujitsu.vdmj.tc.types.TCSet1Type;
unmapped com.fujitsu.vdmj.tc.types.TCTokenType;
unmapped com.fujitsu.vdmj.tc.types.TCTypeSet;
unmapped com.fujitsu.vdmj.tc.types.TCUndefinedType;
unmapped com.fujitsu.vdmj.tc.types.TCUnionType;
unmapped com.fujitsu.vdmj.tc.types.TCUnknownType;
unmapped com.fujitsu.vdmj.tc.types.TCUnresolvedType;
unmapped com.fujitsu.vdmj.tc.types.TCVoidReturnType;
unmapped com.fujitsu.vdmj.tc.types.TCVoidType;

# POG
package com.fujitsu.vdmj.tc to com.fujitsu.vdmj.po;
map TCRecursiveMap{} to PORecursiveMap(this);
map TCRecursiveLoops{recursiveLoops} to PORecursiveLoops(recursiveLoops);

# Java - usually unmappeds
unmapped java.lang.Boolean;
unmapped java.lang.String;
unmapped java.lang.Long;
unmapped java.lang.Integer;
unmapped com.fujitsu.vdmj.mapper.FileList;
